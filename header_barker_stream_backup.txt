/* -*- c++ -*- */
/*
 * Copyright 2025 Julian Birk.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#include <unordered_map>
#include <gnuradio/io_signature.h>
#include "phyiscal_header_barker_stream_impl.h"


namespace gr {
  namespace hwu {

    // std::unordered_map<int, uint16_t> BARKER_CODES;

    using input_type = uint8_t;
    using output_type = uint8_t; 
    phyiscal_header_barker_stream::sptr
    phyiscal_header_barker_stream::make(int barker_len, const std::string& lengthtagname, bool add_tail)
    {
      return gnuradio::make_block_sptr<phyiscal_header_barker_stream_impl>(
        barker_len, lengthtagname, add_tail);
    }


    /*
     * The private constructor
     */
    phyiscal_header_barker_stream_impl::phyiscal_header_barker_stream_impl(int barker_len, const std::string& lengthtagname, bool add_tail)
      : tagged_stream_block("phyiscal_header_barker_stream",
              io_signature::make(1 /* min inputs */, 1 /* max inputs */, sizeof(input_type)),
              io_signature::make(1 /* min outputs */, 1 /*max outputs */, sizeof(output_type)), lengthtagname),
              barker_len(barker_len),
              add_tail(add_tail)
    {

    }

    phyiscal_header_barker_stream_impl::~phyiscal_header_barker_stream_impl()
    {
    }

    int
    phyiscal_header_barker_stream_impl::calculate_output_stream_length(const gr_vector_int &ninput_items)
    {
      // #pragma message("set the following appropriately and remove this warning")
      // int noutput_items = 0;
      return ninput_items[0] + 2 ;
    }

    int
    phyiscal_header_barker_stream_impl::work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
      auto in = static_cast<const input_type*>(input_items[0]);
      auto out = static_cast<output_type*>(output_items[0]);
      size_t packet_len = ninput_items[0];
      /* Original with memcpy:
      memcpy((void*)out, (const void*) BARKER, sizeof(BARKER));
      memcpy((void*)(out + sizeof(BARKER)), (const void*)in, packet_len);
      */
      std::copy(std::begin(BARKER), std::end(BARKER), out);
      std::copy(in, in + packet_len, out + sizeof(BARKER));
      // Tell runtime system how many output items we produced.

      std::vector<tag_t> tags;
      get_tags_in_range(tags, 0, nitems_read(0), nitems_read(0) + packet_len);
      for (const auto &tag : tags) {
        if (tag.key != pmt::string_to_symbol("packet_len")) {
            add_item_tag(0, nitems_written(0) + 2 + tag.offset,
                         tag.key, tag.value, tag.srcid);
        }
    }
      return packet_len + 2;
    }

  } /* namespace hwu */
} /* namespace gr */

